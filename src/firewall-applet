#!/usr/bin/python
#
# Copyright (C) 2010-2012 Red Hat, Inc.
# Authors:
# Thomas Woerner <twoerner@redhat.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

from gi.repository import Gtk, GLib, GObject, Gio, Notify, NMClient, \
    NetworkManager
import sys
sys.modules['gobject'] = GObject

import os
import dbus.mainloop.glib
import slip.dbus

from firewall.config import *
from firewall.config.dbus import *
from firewall.client import FirewallClient
import dbus


PATH = [ ]
for p in os.getenv("PATH").split(":"):
    if p not in PATH:
        PATH.append(p)

def search_app(app):
    for p in PATH:
        _app = "%s/%s" % (p, app)
        if os.path.exists(_app):
            return _app
    return None

APPLET_SCHEMA = "org.fedoraproject.FirewallApplet"

class TrayApplet(object):
    @staticmethod
    def position_function(menu, icon):
        return (Gtk.StatusIcon.position_menu(menu, icon))

    def __init__(self):
        self.name = _("Firewall Applet")
#        self.comment = _("")
        self.icon_name = "firewall-applet"
        self.settings = Gio.Settings.new(APPLET_SCHEMA)

        self.icons = { "normal": None, "error": None, "panic": None, }
        self.timer = None
        self.mode = None
        self._blink = False
        self.blink_count = 0

        self.active_zones = { }
        self.connections = { }

        self.statusicon = Gtk.StatusIcon.new()
#        self.statusicon.connect("delete_event", Gtk.main_quit)
        self.statusicon.set_from_icon_name(self.icon_name)

        theme = Gtk.IconTheme.get_default()
        # Gtk.IconSize.MENU
        size = 24

        info = theme.lookup_icon("firewall-applet", size, 0)
        if not info:
            print("Icon 'firewall-applet' could not be loaded")
        else:
            self.icons["normal"] = info.load_icon()

        for _type in [ "error", "panic" ]:
            info = theme.lookup_icon("firewall-applet-%s" % _type, size, 0)
            if not info:
                print("Icon 'firewall-applet-%s' could not be loaded" % _type)
            else:
                self.icons[_type] = info.load_icon()

        self.right_menu = Gtk.Menu.new()

#        item = Gtk.CheckMenuItem.new_with_mnemonic(_("Enable Firewall"))
#        item.set_active(True)
#        item.set_sensitive(False)
#        self.right_menu.append(item)

        self.shieldsup_check = Gtk.CheckMenuItem.new_with_mnemonic(
            _("Shields Up"))        
        self.shieldsup_check.set_active(False)
        self.shieldsup_check.connect('toggled', self.shieldsup_check_toggled)
        self.right_menu.append(self.shieldsup_check)

        self.settings.connect("changed::shields-up",
                              self.settings_shields_up_changed)
        self.settings.connect("changed::shields-down",
                              self.settings_shields_down_changed)

        self.notification_check = Gtk.CheckMenuItem.new_with_mnemonic(
            _("Enable Notifications"))
        self.notification_check.set_active(self.settings.get_boolean(
                "notifications"))
        self.settings.connect("changed::notifications",
                              self.settings_check_changed,
                              self.notification_check)
        self.notification_check.connect('toggled',
                                        self.notification_check_toggled,
                                        self.settings, "notifications")
        self.right_menu.append(self.notification_check)

        self.right_menu.append(Gtk.SeparatorMenuItem.new())

        item = Gtk.MenuItem.new_with_mnemonic(_("Edit Firewall Settings..."))
        item.connect("activate", self.configure_cb)
        if not search_app("firewall-config"):
            item.set_sensitive(False)

        self.right_menu.append(item)
        
        item = Gtk.MenuItem.new_with_mnemonic(_("Configure Shields UP/Down Zones..."))
        item.connect("activate", self.configure_shields_cb)

        self.right_menu.append(item)

        self.right_menu.append(Gtk.SeparatorMenuItem.new())

        self.panic_check = Gtk.CheckMenuItem.new_with_mnemonic(\
            _("Block all network traffic"))
        self.panic_check.set_active(False)
        self.panic_check_id = self.panic_check.connect("toggled",
                                                       self.panic_mode_cb)
        self.right_menu.append(self.panic_check)

        self.right_menu.append(Gtk.SeparatorMenuItem.new())

        item = Gtk.ImageMenuItem.new_from_stock(Gtk.STOCK_ABOUT, None)
        item.connect('activate', self.about_cb)
        self.right_menu.append(item)

        self.statusicon.connect("popup-menu", self.right_menu_cb,
                                self.right_menu)

        self.about_dialog = Gtk.AboutDialog.new()
        self.about_dialog.set_name(self.name)
        self.about_dialog.set_version(VERSION)
#        self.about_dialog.set_comments(self.comment)
        self.about_dialog.set_license(LICENSE)
        self.about_dialog.set_wrap_license(True)
        self.about_dialog.set_copyright(COPYRIGHT)
        self.about_dialog.set_authors(AUTHORS)
        self.about_dialog.set_logo_icon_name(self.icon_name)

        # shields up/down configure dialog

        self.shields_dialog = Gtk.Dialog(_("Configure Shields Up/Down Zones"))
        self.shields_dialog.set_default_size(400, 100)
        self.shields_dialog.set_property("width-request", 400)
        self.shields_dialog.set_property("height-request", 100)
        self.shields_dialog.add_buttons("gtk-close", 1)
        self.shields_dialog.set_modal(True)
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        vbox.set_border_width(12)
        vbox.set_homogeneous(False)

        label = Gtk.Label()
        label.set_markup(_("Here you can select the zones used for Shields "
                           "Up and Shields Down."))
        label.set_line_wrap(True)
        label.set_justify(Gtk.Justification.LEFT)
        label.set_alignment(0, 0.5)
        vbox.pack_start(label, True, True, 0)

        label = Gtk.Label()
        label.set_markup(_("This feature is useful for people using the "
                           "default zones mostly. For users, that are "
                           "changing zones of connections, it might be of "
                           "limited use."))
        label.set_line_wrap(True)
        label.set_justify(Gtk.Justification.LEFT)
        label.set_alignment(0, 0.5)
        vbox.pack_start(label, True, True, 0)

        grid = Gtk.Grid()
        grid.set_row_spacing(6)
        grid.set_column_spacing(6)
        grid.set_border_width(6)

        label = Gtk.Label()
        label.set_markup(_("Shields Up Zone:"))
        label.set_line_wrap(True)
        label.set_justify(Gtk.Justification.LEFT)
        label.set_alignment(1, 0.5)
        grid.attach(label, 0, 0, 1, 1)

        self.shields_up_combo = Gtk.ComboBoxText()
        self.shields_up_combo.connect("changed", self.shields_up_changed)
        grid.attach(self.shields_up_combo, 1, 0, 1, 1)

        label = Gtk.Label()
        label.set_markup(_("Shields Down Zone:"))
        label.set_line_wrap(True)
        label.set_justify(Gtk.Justification.LEFT)
        label.set_alignment(1, 0.5)
        grid.attach(label, 0, 1, 1, 1)

        self.shields_down_combo = Gtk.ComboBoxText()
        self.shields_down_combo.connect("changed", self.shields_down_changed)
        grid.attach(self.shields_down_combo, 1, 1, 1, 1)

        button = Gtk.Button("Set To Default")
        button.connect("clicked", self.reset_shields_up_zone)
        grid.attach(button, 2, 0, 1, 1)

        button = Gtk.Button("Set To Default")
        button.connect("clicked", self.reset_shields_down_zone)
        grid.attach(button, 2, 1, 1, 1)

        vbox.pack_start(grid, True, True, 0)

        box = self.shields_dialog.get_content_area()
#        box.add(vbox)
        box.set_border_width(6)
        box.set_homogeneous(False)
        box.pack_start(vbox, False, True, 0)

        # status icon

        self.statusicon.set_visible(True)

        dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
        try:
            self.bus = slip.dbus.SystemBus()
            self.bus.default_timeout = None
        except Exception as msg:
            print(_("Not using slip"), msg)
            self.bus = dbus.SystemBus()

        self.bus.add_signal_receiver(
            handler_function=self.dbus_connection_changed,
            signal_name="NameOwnerChanged",
            dbus_interface="org.freedesktop.DBus")

        self.bus.add_signal_receiver(
            self.signal_receiver,
            dbus_interface=DBUS_INTERFACE_ZONE,
            interface_keyword='interface',
            member_keyword='member',
            path_keyword='path')

        self.bus.add_signal_receiver(
            self.signal_receiver,
            dbus_interface=DBUS_INTERFACE,
            interface_keyword='interface',
            member_keyword='member',
            path_keyword='path')

        self.bus.add_signal_receiver(
            self.nm_signal_receiver,
            dbus_interface="NetworkManager.DBUS_INTERFACE",
            sender_keyword='sender')

        self.fw = None
        GLib.timeout_add_seconds(1, self.start)

    def start(self, *args):
        self.nm_signal_receiver()
        self.connect_to_firewalld()
        self.update()

    def settings_check_changed(self, settings, key, button):
        button.set_active(settings.get_boolean(key))

    def shieldsup_check_toggled(self, button):
        if button.get_active():
            self.fw.setDefaultZone(self.settings.get_string("shields-up"))
        else:
            self.fw.setDefaultZone(self.settings.get_string("shields-down"))

    def notification_check_toggled(self, button, settings, key):
        settings.set_boolean(key, button.get_active())

    def notify(self, msg, sender=None, urgency=Notify.Urgency.NORMAL):
        n = Notify.Notification.new(self.name, msg, self.icon_name)
        n.set_urgency(urgency)
        try:
            n.show()
        except:
            pass

    def dbus_connection_changed(self, name, old_owner, new_owner):
        if name != DBUS_INTERFACE:
            return

        if new_owner:
            # new connection
            self.connect_to_firewalld()
        else:
            # lost connection
            self.connection_to_firewalld_lost()

        # no change, no notification
        if new_owner and not self.fw:
            return
        if not new_owner and self.fw:
            return

        ed = { 1: _("Connection to FirewallD lost."),
               0: _("Connection to FirewallD established.") }
        self.notify(ed[self.fw == None], urgency=Notify.Urgency.CRITICAL)

    def connect_to_firewalld(self):
        try:
            self.fw = FirewallClient(self.bus)
        except dbus.DBusException as e:
            if e._dbus_error_name == \
                    'org.freedesktop.DBus.Error.ServiceUnknown':
                # no connection
                return
            else:
                raise

        self.set_mode("normal")
        self.active_zones.clear()
        active_zones = self.fw.getActiveZones()
        if active_zones:
            self.active_zones = active_zones

        self.shields_up_combo.get_model().clear()
        self.shields_down_combo.get_model().clear()
        zones = self.fw.getZones()
        for zone in zones:
            self.shields_up_combo.append_text(zone)
            self.shields_down_combo.append_text(zone)

        if self.settings.get_string("shields-up") not in zones:
            self.warning("Shields Up zone '%s' not found" % \
                             self.settings.get_string("shields-up"), 
                         "Resetting to default value...")
            self.settings.reset("shields-up")
        if self.settings.get_string("shields-down") not in zones:
            self.warning("Shields Down zone '%s' not found" % \
                             self.settings.get_string("shields-down"), 
                         "Resetting to default value...")
            self.settings.reset("shields-down")

        if self.fw.getDefaultZone() == self.settings.get_string("shields-up"):
            self.shieldsup_check.set_active(True)
        else:
            self.shieldsup_check.set_active(False)

        self.update()

    def connection_to_firewalld_lost(self):
        if self.fw:
            self.fw = None
            self.active_zones.clear()
            self.set_mode("error")
        self.update()

    def panic_mode_cb(self, check):
        if not self.fw:
            return
        if check.get_active():
            self.fw.enablePanicMode()
        else:
            self.fw.disablePanicMode()
        
    def right_menu_cb(self, widget, button, time, menu):
        if button != 3:
            return
        menu.show_all()
        menu.popup(None, None, self.position_function,
                   self.statusicon, button, time)

    def about_cb(self, widget):
        self.about_dialog.run()
        self.about_dialog.hide()

    def configure_cb(self, widget):
        os.system("firewall-config &")

    def combobox_select_text(self, combobox, value):
        model = combobox.get_model()
        iter = model.get_iter_first()
        while iter:
            if model.get_value(iter, 0) == value:
                combobox.set_active_iter(iter)
                return True
            iter = model.iter_next(iter)
        combobox.set_active(0)
        return False

    def shields_up_changed(self, *args):
        text = self.shields_up_combo.get_active_text()
        if text != self.settings.get_string("shields-up"):
            self.settings.set_string("shields-up", text)

    def shields_down_changed(self, *args):
        text = self.shields_down_combo.get_active_text()
        if text != self.settings.get_string("shields-down"):
            self.settings.set_string("shields-down", text)

    def settings_shields_up_changed(self, *args):
        self.combobox_select_text(self.shields_up_combo,
                                  self.settings.get_string("shields-up"))
        #TODO: apply zone if shields-up enabled

    def settings_shields_down_changed(self, *args):
        self.combobox_select_text(self.shields_down_combo,
                                  self.settings.get_string("shields-down"))
        #TODO: apply zone if shields-down enabled?

    def reset_shields_up_zone(self, *args):
        self.settings.reset("shields-up")

    def reset_shields_down_zone(self, *args):
        self.settings.reset("shields-down")

    def configure_shields_cb(self, widget):
        self.combobox_select_text(self.shields_up_combo,
                                  self.settings.get_string("shields-up"))
        self.combobox_select_text(self.shields_down_combo,
                                  self.settings.get_string("shields-down"))

        self.shields_dialog.show_all()
        self.shields_dialog.run()
        self.shields_dialog.hide()

    def __blink(self, arg=None):
        if self.blink_count != 0:
            if self.blink_count > 0 and self._blink:
                self.blink_count -= 1
            self._blink = not self._blink
            self.timer = GLib.timeout_add_seconds(1, self.__blink, None)

        if not self._blink:
            self.statusicon.set_from_pixbuf(self.icons[self.mode])
        else:
            self.statusicon.set_from_pixbuf(self.icons["normal"])

    def set_mode(self, mode, count=5):
        if self.mode != mode:
            if self.timer:
                GLib.source_remove(self.timer)
                self.timer = None
                self._blink = False
            self.mode = mode

        elif self.mode == mode and self.timer:
            if self.blink_count == 0:
                self.blink_count += 1
            return

        if mode == "normal":
            self.statusicon.set_from_pixbuf(self.icons[mode])
            return

        if count != 0:
            self._blink = True
            self.blink_count = count
            self.__blink()

    def update(self):
        if not self.fw:
            self.set_mode("error")
            self.tooltip = "<span color='#FF0000'>" + \
                _("No connection to firewall daemon") + "</span>"
            self.statusicon.set_tooltip_markup(self.tooltip)
            return

        if self.panic_check.get_active():
            self.tooltip = "<big><b><span color='#FF0000'>" + \
                _("PANIC MODE") + "</span></b></big>"
            self.statusicon.set_tooltip_markup(self.tooltip)
            return
        
        self.tooltip = ""

        messages = [ ]
        if len(self.active_zones) > 0:
            for zone in sorted(self.active_zones):
                for interface in sorted(self.active_zones[zone]):
                    if interface in self.connections:
                        connection = self.connections[interface]
                        text = _("Zone '{zone}' active for connection "
                                 "'{connection}' on interface '{interface}'")
                    else:
                        text = _("Zone '{zone}' active for interface "
                                 "'{interface}'")
                        connection = None
                    messages.append(text.format(zone=zone,
                                                connection=connection,
                                                interface=interface))
            self.tooltip = "\n".join(messages)
        else:
            self.tooltip = _("No Active Zones.")

        self.statusicon.set_tooltip_markup(self.tooltip)

    def signal_receiver(self, *args, **kwargs):
        if not "member" in kwargs:
            return
        signal = kwargs["member"]

        if self.notification_check.get_active():
            if signal == "Reloaded":
                self.notify(_("FirewallD has been reloaded."))
            elif signal == "DefaultZoneChanged":
                self.notify(_("Default zone changed to '%s'.") % args[0])

                if args[0] == self.settings.get_string("shields-up"):
                    self.shieldsup_check.set_active(True)
                else:
                    self.shieldsup_check.set_active(False)

        if signal in [ "PanicModeEnabled", "PanicModeDisabled" ]:
            if signal == "PanicModeEnabled":
                enable = True
            else:
                enable = False

            self.panic_check.handler_block(self.panic_check_id)
            self.panic_check.set_active(enable == 1)
            self.panic_check.handler_unblock(self.panic_check_id)

            self.update()

            if enable:
                self.set_mode("panic")
            else:
                self.set_mode("normal")

            if self.notification_check.get_active():
                ed = { 1: _("All network traffic is blocked."),
                       0: _("Network traffic is not blocked anymore.") }
                self.notify(ed[enable], urgency=Notify.Urgency.CRITICAL)

        elif signal in [ "InterfaceAdded", "InterfaceRemoved" ]:
            if signal == "InterfaceAdded":
                enable = True
            else:
                enable = False

            # interface signal
            zone = str(args[0])
            interface = str(args[1])

            if enable:
                if zone not in self.active_zones:
                    self.active_zones[zone] = [ ]
                if interface not in self.active_zones[zone]:
                    self.active_zones[zone].append(interface)
            else:
                try:
                    self.active_zones[zone].remove(interface)
                    if len(self.active_zones[zone]) < 1:
                        del self.active_zones[zone]
                except Exception as msg:
                    print(msg)

            self.update()

            # send notification if enabled
            if self.notification_check.get_active():
                ed = { 1: _("activated"),
                       0: _("deactivated") }
                if interface in self.connections:
                    connection = self.connections[interface]
                    text = _("Zone '{zone}' {activated_deactivated} for "
                             "connection '{connection}' on "
                             "interface '{interface}'")
                else:
                    connection = None
                    text = _("Zone '{zone}' {activated_deactivated} for "
                             "interface '{interface}'")
                self.notify(text.format(zone=zone,
                                        activated_deactivated=ed[enable],
                                        connection=connection,
                                        interface=interface))

        elif signal == "ZoneChanged":
            zone = args[0]
            interface = args[1]

            for _zone in self.active_zones:
                if interface in self.active_zones[zone]:
                    self.active_zones[zone].remove(str(interface))
                    if len(self.active_zones[zone]) < 1:
                        del self.active_zones[zone]
                        break

            self.update()

            self.active_zones.setdefault(zone, [ ]).append(str(interface))
            if self.notification_check.get_active():
                self.notify(_("Zone '%s' activated for interface '%s'") % \
                                (zone, interface))

    def nm_signal_receiver(self, *args, **kwargs):
        #print("nm_signal_receiver", args, kwargs)
        self.connections.clear()
        try:
            self.nmclient = NMClient.Client()
            for active in self.nmclient.get_active_connections():
                obj = self.bus.get_object(NetworkManager.DBUS_INTERFACE,
                                          active.get_connection())
                connection = obj.GetSettings()['connection']['id']
                for dev in active.get_devices():
                    self.connections[dev.get_ip_iface()] = \
                        connection.encode("utf-8")
        except Exception as msg:
            print(msg)

        self.update()

    def warning(self, text, secondary_text=None):
        self.message(text, secondary_text=secondary_text,
                     msg_type=Gtk.MessageType.WARNING)

    def error(self, text, secondary_text=None):
        self.message(text, secondary_text=secondary_text,
                     msg_type=Gtk.MessageType.ERROR)

    def message(self, text, secondary_text=None, msg_type=Gtk.MessageType.INFO,
                buttons=[ ("gtk-close", Gtk.ResponseType.CLOSE) ]):
        dialog = Gtk.MessageDialog(None, 0, msg_type, None, text)
        dialog.set_title(_("Firewall-applet"))
        for (button, response) in buttons:
            dialog.add_button(button, response)
        if secondary_text != None:
            dialog.format_secondary_text(secondary_text)
        dialog.show_all()
        result = dialog.run()
        dialog.hide()
        return result

# MAIN

if __name__ == "__main__":
    mainloop = GObject.MainLoop()
    applet = TrayApplet()
    Notify.init(applet.name)
    mainloop.run()
