#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2009-2013 Red Hat, Inc.
#
# Authors:
# Thomas Woerner <twoerner@redhat.com>
# Jiri Popelka <jpopelka@redhat.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

from gi.repository import GObject
import sys
sys.modules['gobject'] = GObject

import argparse
import dbus
import os

from firewall.client import FirewallClient
from firewall.errors import *

def __fail(msg=None):
    if msg:
        print(msg)
    sys.exit(2)

def __parse_port(value):
    try:
        (port, proto) = value.split("/")
    except Exception as e:
        __fail("bad port (most likely missing protocol)")
    return (port, proto)

def __parse_forward_port(value):
    port = None
    protocol = None
    toport = None
    toaddr = None
    args = value.split(":")
    for arg in args:
        try:
            (opt,val) = arg.split("=")
            if opt == "port":
                port = val
            elif opt == "proto":
                protocol = val
            elif opt == "toport":
                toport = val
            elif opt == "toaddr":
                toaddr = val
        except:
            __fail("invalid forward port arg '%s'" % (arg))
    if not port:
        __fail("missing port")
    if not protocol:
        __fail("missing protocol")
    if not (toport or toaddr):
        __fail("missing destination")
    return (port, protocol, toport, toaddr)

def __list_all(fw, zone):
    interfaces = fw.getInterfaces(zone)
    sources = fw.getSources(zone)
    services = fw.getServices(zone)
    ports = fw.getPorts(zone)
    masquerade = fw.queryMasquerade(zone)
    forward_ports = fw.getForwardPorts(zone)
    icmp_blocks = fw.getIcmpBlocks(zone)
    rules = fw.getRichRules(zone)

    print(zone if zone != "" else fw.getDefaultZone())
    print("  interfaces: " + " ".join(interfaces))
    print("  sources: " + " ".join(sources))
    print("  services: " + " ".join(services))
    print("  ports: " + " ".join(["%s/%s" % (port[0], port[1]) for port in ports]))
    print("  masquerade: %s" % ("yes" if masquerade else "no"))
    print("  forward-ports: " + "\n\t".join(["port=%s:proto=%s:toport=%s:toaddr=%s" % (port, protocol, toport, toaddr) for (port, protocol, toport, toaddr) in forward_ports]))
    print("  icmp-blocks: " + " ".join(icmp_blocks))
    print("  rich rules: \n\t" + "\n\t".join(rules))

parser = argparse.ArgumentParser(usage="see firewall-cmd man page",
                                 add_help=False)

parser_group_standalone = parser.add_mutually_exclusive_group()
parser_group_standalone.add_argument("-h", "--help",
                                     action="store_true")
parser_group_standalone.add_argument("-V", "--version", action="store_true")
parser_group_standalone.add_argument("--state", action="store_true")
parser_group_standalone.add_argument("--reload", action="store_true")
parser_group_standalone.add_argument("--complete-reload", action="store_true")
parser_group_standalone.add_argument("--panic-on", action="store_true")
parser_group_standalone.add_argument("--panic-off", action="store_true")
parser_group_standalone.add_argument("--query-panic", action="store_true")
parser_group_standalone.add_argument("--lockdown-on", action="store_true")
parser_group_standalone.add_argument("--lockdown-off", action="store_true")
parser_group_standalone.add_argument("--query-lockdown", action="store_true")

parser_group_standalone.add_argument("--list-lockdown-whitelist-commands", action="store_true")
parser_group_standalone.add_argument("--add-lockdown-whitelist-command", metavar="<command>")
parser_group_standalone.add_argument("--remove-lockdown-whitelist-command", metavar="<command>")
parser_group_standalone.add_argument("--query-lockdown-whitelist-command", metavar="<command>")

parser_group_standalone.add_argument("--list-lockdown-whitelist-contexts", action="store_true")
parser_group_standalone.add_argument("--add-lockdown-whitelist-context", metavar="<context>")
parser_group_standalone.add_argument("--remove-lockdown-whitelist-context", metavar="<context>")
parser_group_standalone.add_argument("--query-lockdown-whitelist-context", metavar="<context>")


parser_group_standalone.add_argument("--list-lockdown-whitelist-uids", action="store_true")
parser_group_standalone.add_argument("--add-lockdown-whitelist-uid", metavar="<uid>", type=int)
parser_group_standalone.add_argument("--remove-lockdown-whitelist-uid", metavar="<uid>", type=int)
parser_group_standalone.add_argument("--query-lockdown-whitelist-uid", metavar="<uid>", type=int)

parser_group_standalone.add_argument("--list-lockdown-whitelist-users", action="store_true")
parser_group_standalone.add_argument("--add-lockdown-whitelist-user", metavar="<user>")
parser_group_standalone.add_argument("--remove-lockdown-whitelist-user", metavar="<user>")
parser_group_standalone.add_argument("--query-lockdown-whitelist-user", metavar="<user>")


parser_group_standalone.add_argument("--get-default-zone", action="store_true")
parser_group_standalone.add_argument("--set-default-zone", metavar="<zone>")
parser_group_standalone.add_argument("--get-zones", action="store_true")
parser_group_standalone.add_argument("--get-services", action="store_true")
parser_group_standalone.add_argument("--get-icmptypes", action="store_true")
parser_group_standalone.add_argument("--get-active-zones", action="store_true")
parser_group_standalone.add_argument("--get-zone-of-interface", metavar="<iface>")
parser_group_standalone.add_argument("--get-zone-of-source", metavar="<source>")
parser_group_standalone.add_argument("--list-all-zones", action="store_true")

parser.add_argument("--permanent", action="store_true")
parser.add_argument("--zone", default="", metavar="<zone>")
parser.add_argument("--timeout", default=0, type=int, metavar="<seconds>")

parser_group_zone = parser.add_mutually_exclusive_group()
parser_group_zone.add_argument("--add-interface", metavar="<iface>")
parser_group_zone.add_argument("--remove-interface", metavar="<iface>")
parser_group_zone.add_argument("--query-interface", metavar="<iface>")
parser_group_zone.add_argument("--change-interface", "--change-zone", metavar="<iface>")
parser_group_zone.add_argument("--list-interfaces", action="store_true")
parser_group_zone.add_argument("--add-source", metavar="<source>")
parser_group_zone.add_argument("--remove-source", metavar="<source>")
parser_group_zone.add_argument("--query-source", metavar="<source>")
parser_group_zone.add_argument("--change-source", metavar="<source>")
parser_group_zone.add_argument("--list-sources", action="store_true")
parser_group_zone.add_argument("--add-rich-rule", metavar="<service>", action='append')
parser_group_zone.add_argument("--remove-rich-rule", metavar="<zone>", action='append')
parser_group_zone.add_argument("--query-rich-rule", metavar="<zone>")
parser_group_zone.add_argument("--add-service", metavar="<service>", action='append')
parser_group_zone.add_argument("--remove-service", metavar="<zone>", action='append')
parser_group_zone.add_argument("--query-service", metavar="<zone>")
parser_group_zone.add_argument("--add-port", metavar="<port>", action='append')
parser_group_zone.add_argument("--remove-port", metavar="<port>", action='append')
parser_group_zone.add_argument("--query-port", metavar="<port>")
parser_group_zone.add_argument("--add-masquerade", action="store_true")
parser_group_zone.add_argument("--remove-masquerade", action="store_true")
parser_group_zone.add_argument("--query-masquerade", action="store_true")
parser_group_zone.add_argument("--add-icmp-block", metavar="<icmptype>", action='append')
parser_group_zone.add_argument("--remove-icmp-block", metavar="<icmptype>", action='append')
parser_group_zone.add_argument("--query-icmp-block", metavar="<icmptype>")
parser_group_zone.add_argument("--add-forward-port", metavar="<port>", action='append')
parser_group_zone.add_argument("--remove-forward-port", metavar="<port>", action='append')
parser_group_zone.add_argument("--query-forward-port", metavar="<port>")
parser_group_zone.add_argument("--list-rich-rules", action="store_true")
parser_group_zone.add_argument("--list-services", action="store_true")
parser_group_zone.add_argument("--list-ports", action="store_true")
parser_group_zone.add_argument("--list-icmp-blocks", action="store_true")
parser_group_zone.add_argument("--list-forward-ports", action="store_true")
parser_group_zone.add_argument("--list-all", action="store_true")

parser.add_argument("--direct", action="store_true")

parser_direct = parser.add_mutually_exclusive_group()
parser_direct.add_argument("--passthrough", nargs=argparse.REMAINDER,
                    metavar=("{ ipv4 | ipv6 | eb }", "<args>"))
parser_direct.add_argument("--add-chain", nargs=3,
                    metavar=("{ ipv4 | ipv6 | eb }", "<table>", "<chain>"))
parser_direct.add_argument("--remove-chain", nargs=3,
                        metavar=("{ ipv4 | ipv6 | eb }", "<table>", "<chain>"))
parser_direct.add_argument("--query-chain", nargs=3,
                        metavar=("{ ipv4 | ipv6 | eb }", "<table>", "<chain>"))
parser_direct.add_argument("--get-chains", nargs=2,
                        metavar=("{ ipv4 | ipv6 | eb }", "<table>"))
parser_direct.add_argument("--add-rule", nargs=argparse.REMAINDER,
                        metavar=("{ ipv4 | ipv6 | eb }", "<table> <chain> <priority> <args>"))
parser_direct.add_argument("--remove-rule", nargs=argparse.REMAINDER,
                        metavar=("{ ipv4 | ipv6 | eb }", "<table> <chain> <args>"))
parser_direct.add_argument("--query-rule", nargs=argparse.REMAINDER,
                        metavar=("{ ipv4 | ipv6 | eb }", "<table> <chain> <args>"))
parser_direct.add_argument("--get-rules", nargs=3,
                        metavar=("{ ipv4 | ipv6 | eb }", "<table>", "<chain>"))

a = parser.parse_args()

options_standalone = a.help or a.version or \
    a.state or a.reload or a.complete_reload or \
    a.panic_on or a.panic_off or a.query_panic or \
    a.get_default_zone or a.set_default_zone or \
    a.get_active_zones or a.get_zone_of_interface or \
    a.get_zone_of_source or \
    a.list_all_zones

options_lockdown_whitelist = \
    a.list_lockdown_whitelist_commands or a.add_lockdown_whitelist_command or \
    a.remove_lockdown_whitelist_command or \
    a.query_lockdown_whitelist_command or \
    a.list_lockdown_whitelist_contexts or a.add_lockdown_whitelist_context or \
    a.remove_lockdown_whitelist_context or \
    a.query_lockdown_whitelist_context or \
    a.list_lockdown_whitelist_uids or a.add_lockdown_whitelist_uid or \
    a.remove_lockdown_whitelist_uid or \
    a.query_lockdown_whitelist_uid or \
    a.list_lockdown_whitelist_users or a.add_lockdown_whitelist_user or \
    a.remove_lockdown_whitelist_user or \
    a.query_lockdown_whitelist_user

options_config = a.get_zones or a.get_services or a.get_icmptypes or \
    a.lockdown_on or a.lockdown_off or a.query_lockdown or \
    options_lockdown_whitelist

options_zone_action_action = \
    a.add_service or a.remove_service or a.query_service or \
    a.add_port or a.remove_port or a.query_port or \
    a.add_icmp_block or a.remove_icmp_block or a.query_icmp_block or \
    a.add_forward_port or a.remove_forward_port or a.query_forward_port or \
    a.add_rich_rule or a.remove_rich_rule or a.query_rich_rule or \
    a.list_interfaces or a.change_interface or \
    a.add_interface or a.remove_interface or a.query_interface or \
    a.list_sources or a.change_source or \
    a.add_source or a.remove_source or a.query_source

options_zone_adapt_query = \
            a.add_masquerade or a.remove_masquerade or a.query_masquerade or \
 a.list_services or a.list_ports or a.list_icmp_blocks or \
 a.list_forward_ports or a.list_rich_rules

options_zone = a.zone or a.list_all or a.timeout or \
    options_zone_action_action or options_zone_adapt_query

options_permanent = a.permanent or options_config or a.zone or \
                    options_zone_action_action or options_zone_adapt_query

options_direct = a.direct or a.passthrough or \
           a.add_chain or a.remove_chain or a.query_chain or a.get_chains or \
                 a.add_rule or a.remove_rule or a.query_rule or a.get_rules

# Check various impossible combinations of options

if not (options_standalone or options_zone or \
        options_permanent or options_direct):
    __fail(parser.format_usage() + "No option specified.")

if options_standalone and (options_zone or options_permanent or options_direct):
    __fail(parser.format_usage() +
           "Can't use stand-alone options with other options.")
if options_direct and (options_zone or options_permanent):
    __fail(parser.format_usage() +
           "Can't use 'direct' options with other options.")

if options_config and options_zone:
    __fail(parser.format_usage() +
           "Wrong usage of --get-zones | --get-services | --get-icmptypes.")

if a.timeout and not (a.add_service or a.add_port or a.add_icmp_block or \
                          a.add_forward_port or a.add_masquerade or \
                          a.add_rich_rule):
    __fail(parser.format_usage() + "Wrong --timeout usage")

if a.permanent:
    if a.timeout != 0:
        __fail(parser.format_usage() +
               "Can't specify timeout for permanent action.")
    if options_config and not a.zone:
        pass
    elif options_zone_action_action or options_zone_adapt_query:
        pass
    else:
        __fail(parser.format_usage() + "Wrong --permanent usage.")

if a.help:
    os.system("man firewall-cmd")
    sys.exit(0)

zone = a.zone
try:
    fw = FirewallClient()
    if fw.connected == False:
        if a.state:
            print "not running"
        else:
            print "FirewallD is not running"
        sys.exit(NOT_RUNNING)

    if a.permanent:
        if a.get_zones:
            zones = fw.config().listZones()
            l = [fw.config().getZone(z).get_property("name") for z in zones]
            if len(l) > 0:
                print(" ".join(l))
        elif a.get_services:
            services = fw.config().listServices()
            l = [fw.config().getService(s).get_property("name") for s in services]
            if len(l) > 0:
                print(" ".join(l))
        elif a.get_icmptypes:
            icmptypes = fw.config().listIcmpTypes()
            l = [fw.config().getIcmpType(i).get_property("name") for i in icmptypes]
            if len(l) > 0:
                print(" ".join(l))

        # lockdown
        elif a.lockdown_on:
            fw.config().set_property("Lockdown", "yes")
        elif a.lockdown_off:
            fw.config().set_property("Lockdown", "no")
        elif a.query_lockdown:
            lockdown = fw.config().get_property("Lockdown")
            sys.exit(not lockdown.lower() in [ "yes", "true" ])

        # lockdown whitelist

        elif options_lockdown_whitelist:
            whitelist = fw.config().policies.getLockdownWhitelist()
                
            # commands
            if a.list_lockdown_whitelist_commands:
                l = whitelist.getCommands()
                if len(l) > 0:
                    print("\n".join(l))
                sys.exit(0)
            elif a.add_lockdown_whitelist_command:
                whitelist.addCommand(a.add_lockdown_whitelist_command)
            elif a.remove_lockdown_whitelist_command:
                whitelist.removeCommand(a.remove_lockdown_whitelist_command)
            elif a.query_lockdown_whitelist_command:
                sys.exit(not whitelist.queryCommand( \
                        a.query_lockdown_whitelist_command))

            # contexts
            elif a.list_lockdown_whitelist_contexts:
                l = whitelist.getContexts()
                if len(l) > 0:
                    print("\n".join(l))
                sys.exit(0)
            elif a.add_lockdown_whitelist_context:
                whitelist.addContext(a.add_lockdown_whitelist_context) 
            elif a.remove_lockdown_whitelist_context:
                whitelist.removeContext(a.remove_lockdown_whitelist_context)
            elif a.query_lockdown_whitelist_context:
                sys.exit(not whitelist.queryContext( \
                        a.query_lockdown_whitelist_context))

            # uids
            elif a.list_lockdown_whitelist_uids:
                l = whitelist.getUids()
                if len(l) > 0:
                    print(" ".join(map(str, l)))
                sys.exit(0)
            elif a.add_lockdown_whitelist_uid:
                whitelist.addUid(a.add_lockdown_whitelist_uid)
            elif a.remove_lockdown_whitelist_uid:
                whitelist.removeUid(a.remove_lockdown_whitelist_uid)
            elif a.query_lockdown_whitelist_uid:
                sys.exit(not whitelist.queryUid(a.query_lockdown_whitelist_uid))

            # users
            elif a.list_lockdown_whitelist_users:
                l = whitelist.getUsers()
                if len(l) > 0:
                    print("\n".join(l))
                sys.exit(0)
            elif a.add_lockdown_whitelist_user:
                whitelist.addUser(a.add_lockdown_whitelist_user) 
            elif a.remove_lockdown_whitelist_user:
                whitelist.removeUser(a.remove_lockdown_whitelist_user)
            elif a.query_lockdown_whitelist_user:
                sys.exit(not whitelist.queryUser( \
                        a.query_lockdown_whitelist_user))

            # apply whitelist changes
            fw.config().policies.setLockdownWhitelist(whitelist)

        else:
            if zone == "":
                zone = fw.getDefaultZone()
            fw_zone = fw.config().getZoneByName(zone)
            fw_settings = fw_zone.getSettings()

            # interface
            if a.list_interfaces:
                l = fw_settings.getInterfaces()
                if len(l) > 0:
                    print(" ".join(l))
                sys.exit(0)
            elif a.add_interface:
                fw_settings.addInterface(a.add_interface)
            elif a.remove_interface:
                fw_settings.removeInterface(a.remove_interface)
            elif a.query_interface:
                sys.exit(not fw_settings.queryInterface(a.query_interface))

            # source
            if a.list_sources:
                sources = fw_settings.getSources()
                if len(sources) > 0:
                    print(" ".join(sources))
                sys.exit(0)
            elif a.add_source:
                fw_settings.addSource(a.add_source)
            elif a.remove_source:
                fw_settings.removeSource(a.remove_source)
            elif a.query_source:
                sys.exit(not fw_settings.querySource(a.query_source))

            # rich rules
            if a.list_rich_rules:
                l = fw_settings.getRichRules()
                if len(l) > 0:
                    print("\n".join(l))
                sys.exit(0)
            elif a.add_rich_rule:
                for s in a.add_rich_rule:
                    fw_settings.addRichRule(s)
            elif a.remove_rich_rule:
                for s in a.remove_rich_rule:
                    fw_settings.removeRichRule(s)
            elif a.query_rich_rule:
                sys.exit(not fw_settings.queryRichRule(a.query_rich_rule))

            # service
            if a.list_services:
                l = fw_settings.getServices()
                if len(l) > 0:
                    print(" ".join(l))
                sys.exit(0)
            elif a.add_service:
                for s in a.add_service:
                    fw_settings.addService(s)
            elif a.remove_service:
                for s in a.remove_service:
                    fw_settings.removeService(s)
            elif a.query_service:
                sys.exit(not fw_settings.queryService(a.query_service))

            # port
            elif a.list_ports:
                l = fw_settings.getPorts()
                if len(l) > 0:
                    print(" ".join(["%s/%s" % (port[0], port[1]) for port in l]))
                sys.exit(0)
            elif a.add_port:
                for port_proto in a.add_port:
                    (port, proto) = __parse_port(port_proto)
                    fw_settings.addPort(port, proto)
            elif a.remove_port:
                for port_proto in a.remove_port:
                    (port, proto) = __parse_port(port_proto)
                    fw_settings.removePort(port, proto)
            elif a.query_port:
                (port, proto) = __parse_port(a.query_port)
                sys.exit(not fw_settings.queryPort(port, proto))

            # masquerade
            elif a.add_masquerade:
                fw_settings.setMasquerade(True)
            elif a.remove_masquerade:
                fw_settings.setMasquerade(False)
            elif a.query_masquerade:
                sys.exit(not fw_settings.getMasquerade())

            # forward port
            elif a.list_forward_ports:
                l = fw_settings.getForwardPorts()
                if len(l) > 0:
                    print("\n".join(["port=%s:proto=%s:toport=%s:toaddr=%s" % (port, protocol, toport, toaddr) for (port, protocol, toport, toaddr) in l]))
                sys.exit(0)
            elif a.add_forward_port:
                for fp in a.add_forward_port:
                    (port, protocol, toport, toaddr) = __parse_forward_port(fp)
                    fw_settings.addForwardPort(port, protocol, toport, toaddr)
            elif a.remove_forward_port:
                for fp in a.remove_forward_port:
                    (port, protocol, toport, toaddr) = __parse_forward_port(fp)
                    fw_settings.removeForwardPort(port, protocol, toport, toaddr)
            elif a.query_forward_port:
                (port, protocol, toport, toaddr) = __parse_forward_port(a.query_forward_port)
                sys.exit(not fw_settings.queryForwardPort(port, protocol, toport, toaddr))

            # block icmp
            elif a.list_icmp_blocks:
                l = fw_settings.getIcmpBlocks()
                if len(l) > 0:
                    print(" ".join(l))
                sys.exit(0)
            elif a.add_icmp_block:
                for ib in a.add_icmp_block: 
                    fw_settings.addIcmpBlock(ib)
            elif a.remove_icmp_block:
                for ib in a.remove_icmp_block:
                    fw_settings.removeIcmpBlock(ib)
            elif a.query_icmp_block:
                sys.exit(not fw_settings.queryIcmpBlock(a.query_icmp_block))

            fw_zone.update(fw_settings)

    elif a.version:
        print(fw.get_property("version"))
        sys.exit(0)
    elif a.state:
        state = fw.get_property("state")
        if state == "RUNNING":
            print "running"
        else:
            print "not running"
            sys.exit(NOT_RUNNING)
    elif a.reload:
        fw.reload()
    elif a.complete_reload:
        fw.complete_reload()
    elif a.passthrough:
        print(fw.passthrough(a.passthrough[0], a.passthrough[1:]))
    elif a.add_chain:
        fw.addChain(a.add_chain[0], a.add_chain[1], a.add_chain[2])
    elif a.remove_chain:
        fw.removeChain(a.remove_chain[0], a.remove_chain[1], a.remove_chain[2])
    elif a.query_chain:
        sys.exit(not fw.queryChain(a.query_chain[0], a.query_chain[1],
                                   a.query_chain[2]))
    elif a.get_chains:
        print(" ".join(fw.getChains(a.get_chains[0], a.get_chains[1])))
    elif a.add_rule:
        fw.addRule(a.add_rule[0], a.add_rule[1], a.add_rule[2], int(a.add_rule[3]),
                   a.add_rule[4:])
    elif a.remove_rule:
        fw.removeRule(a.remove_rule[0], a.remove_rule[1], a.remove_rule[2],
                      a.remove_rule[3:])
    elif a.query_rule:
        sys.exit(not fw.queryRule(a.query_rule[0], a.query_rule[1],
                                  a.query_rule[2], a.query_rule[3:]))
    elif a.get_rules:
        rules = fw.getRules(a.get_rules[0], a.get_rules[1], a.get_rules[2])
        for rule in rules:
            print(" ".join(rule)) 
    elif a.get_default_zone:
        print(fw.getDefaultZone())
    elif a.set_default_zone:
        fw.setDefaultZone(a.set_default_zone)
    elif a.get_zones:
        print(" ".join(fw.getZones()))
    elif a.get_active_zones:
        zones = fw.getActiveZones()
        for zone in zones:
            print("%s" % (zone))
            for x in [ "interfaces", "sources" ]:
                if x in zones[zone]:
                    print("  %s: %s" % (x, " ".join(zones[zone][x])))
    elif a.get_zone_of_interface:
        try:
            print(fw.getZoneOfInterface(a.get_zone_of_interface))
        except:
            pass
    elif a.get_zone_of_source:
        try:
            print(fw.getZoneOfSource(a.get_zone_of_source))
        except:
            pass
    elif a.get_services:
        l = fw.listServices()
        if len(l) > 0:
            print(" ".join(l))
    elif a.get_icmptypes:
        l = fw.listIcmpTypes()
        if len(l) > 0:
            print(" ".join(l))

    # panic
    elif a.panic_on:
        fw.enablePanicMode()
    elif a.panic_off:
        fw.disablePanicMode()
    elif a.query_panic:
        sys.exit(not fw.queryPanicMode())

    # lockdown
    elif a.lockdown_on:
        fw.enableLockdown()
    elif a.lockdown_off:
        fw.disableLockdown()
    elif a.query_lockdown:
        sys.exit(not fw.queryLockdown())

    # lockdown whitelist

    # commands
    elif a.list_lockdown_whitelist_commands:
        l = fw.getLockdownWhitelistCommands()
        if len(l) > 0:
            print("\n".join(l))
    elif a.add_lockdown_whitelist_command:
        fw.addLockdownWhitelistCommand(a.add_lockdown_whitelist_command)
    elif a.remove_lockdown_whitelist_command:
        fw.removeLockdownWhitelistCommand(a.remove_lockdown_whitelist_command)
    elif a.query_lockdown_whitelist_command:
        sys.exit(not fw.queryLockdownWhitelistCommand( \
                a.query_lockdown_whitelist_command))

    # contexts
    elif a.list_lockdown_whitelist_contexts:
        l = fw.getLockdownWhitelistContexts()
        if len(l) > 0:
            print("\n".join(l))
    elif a.add_lockdown_whitelist_context:
        fw.addLockdownWhitelistContext(a.add_lockdown_whitelist_context)
    elif a.remove_lockdown_whitelist_context:
        fw.removeLockdownWhitelistContext(a.remove_lockdown_whitelist_context)
    elif a.query_lockdown_whitelist_context:
        sys.exit(not fw.queryLockdownWhitelistContext( \
                a.query_lockdown_whitelist_context))

    # uids
    elif a.list_lockdown_whitelist_uids:
        l = fw.getLockdownWhitelistUids()
        if len(l) > 0:
            print(" ".join(map(str, l)))
    elif a.add_lockdown_whitelist_uid:
        fw.addLockdownWhitelistUid(a.add_lockdown_whitelist_uid)
    elif a.remove_lockdown_whitelist_uid:
        fw.removeLockdownWhitelistUid(a.remove_lockdown_whitelist_uid)
    elif a.query_lockdown_whitelist_uid:
        sys.exit(not fw.queryLockdownWhitelistUid(a.query_lockdown_whitelist_uid))

    # users
    elif a.list_lockdown_whitelist_users:
        l = fw.getLockdownWhitelistUsers()
        if len(l) > 0:
            print(" ".join(l))
    elif a.add_lockdown_whitelist_user:
        fw.addLockdownWhitelistUser(a.add_lockdown_whitelist_user)
    elif a.remove_lockdown_whitelist_user:
        fw.removeLockdownWhitelistUser(a.remove_lockdown_whitelist_user)
    elif a.query_lockdown_whitelist_user:
        sys.exit(not fw.queryLockdownWhitelistUser( \
                a.query_lockdown_whitelist_user))

    # interface
    elif a.list_interfaces:
        l = fw.getInterfaces(zone)
        if len(l) > 0:
            print(" ".join(l))
    elif a.add_interface:
        fw.addInterface(zone, a.add_interface)
    elif a.change_interface:
        fw.changeZoneOfInterface(zone, a.change_interface)
    elif a.remove_interface:
        fw.removeInterface(zone, a.remove_interface)
    elif a.query_interface:
        sys.exit(not fw.queryInterface(zone, a.query_interface))

    # source
    elif a.list_sources:
        sources = fw.getSources(zone)
        if len(sources) > 0:
            print(" ".join(sources))
    elif a.add_source:
        fw.addSource(zone, a.add_source)
    elif a.change_source:
        fw.changeZoneOfSource(zone, a.change_source)
    elif a.remove_source:
        fw.removeSource(zone, a.remove_source)
    elif a.query_source:
        sys.exit(not fw.querySource(zone, a.query_source))

    # rich rules
    elif a.list_rich_rules:
        l = fw.getRichRules(zone)
        if len(l) > 0:
            print("\n".join(l))
    elif a.add_rich_rule:
        for s in a.add_rich_rule:
            fw.addRichRule(zone, s, a.timeout)
    elif a.remove_rich_rule:
        for s in a.remove_rich_rule:
            fw.removeRichRule(zone, s)
    elif a.query_rich_rule:
        sys.exit(not fw.queryRichRule(zone, a.query_rich_rule))

    # service
    elif a.list_services:
        l = fw.getServices(zone)
        if len(l) > 0:
            print(" ".join(l))
    elif a.add_service:
        for s in a.add_service:
            fw.addService(zone, s, a.timeout)
    elif a.remove_service:
        for s in a.remove_service:
            fw.removeService(zone, s)
    elif a.query_service:
        sys.exit(not fw.queryService(zone, a.query_service))

    # port
    elif a.list_ports:
        l = fw.getPorts(zone)
        if len(l) > 0:
            print(" ".join(["%s/%s" % (port[0], port[1]) for port in l]))
    elif a.add_port:
        for port_proto in a.add_port:
            (port, proto) = __parse_port(port_proto)
            fw.addPort(zone, port, proto, a.timeout)
    elif a.remove_port:
        for port_proto in a.remove_port:
            (port, proto) = __parse_port(port_proto)
            fw.removePort(zone, port, proto)
    elif a.query_port:
        (port, proto) = __parse_port(a.query_port)
        sys.exit(not fw.queryPort(zone, port, proto))

    # masquerade
    elif a.add_masquerade:
        fw.addMasquerade(zone, a.timeout)
    elif a.remove_masquerade:
        fw.removeMasquerade(zone)
    elif a.query_masquerade:
        sys.exit(not fw.queryMasquerade(zone))

    # forward port
    elif a.list_forward_ports:
        l = fw.getForwardPorts(zone)
        if len(l) > 0:
            print("\n".join(["port=%s:proto=%s:toport=%s:toaddr=%s" % (port, protocol, toport, toaddr) for (port, protocol, toport, toaddr) in l]))

    elif a.add_forward_port:
        for fp in a.add_forward_port:
            (port, protocol, toport, toaddr) = __parse_forward_port(fp)
            fw.addForwardPort(zone, port, protocol, toport, toaddr, a.timeout)
    elif a.remove_forward_port:
        for fp in a.remove_forward_port:
            (port, protocol, toport, toaddr) = __parse_forward_port(fp)
            fw.removeForwardPort(zone, port, protocol, toport, toaddr)
    elif a.query_forward_port:
        (port, protocol, toport, toaddr) = __parse_forward_port(a.query_forward_port)
        sys.exit(not fw.queryForwardPort(zone, port, protocol,
                                         toport, toaddr))

    # block icmp
    elif a.list_icmp_blocks:
        l = fw.getIcmpBlocks(zone)
        if len(l) > 0:
            print(" ".join(l))
    elif a.add_icmp_block:
        for ib in a.add_icmp_block:
            fw.addIcmpBlock(zone, ib, a.timeout)
    elif a.remove_icmp_block:
        for ib in a.remove_icmp_block:
            fw.removeIcmpBlock(zone, ib)
    elif a.query_icmp_block:
        sys.exit(not fw.queryIcmpBlock(zone, a.query_icmp_block))


    # list all
    elif a.list_all:
        __list_all(fw, zone)


    # list everything
    elif a.list_all_zones:
        for zone in fw.getZones():
            __list_all(fw, zone)
            print("")


except dbus.exceptions.DBusException as e:
    dbus_message = e.get_dbus_message()
    dbus_name = e.get_dbus_name()
    if "NotAuthorizedException" in dbus_name:
        print ("Authorization failed.")
        print ("Make sure polkit agent is running or run firewall-cmd as superuser.")
        sys.exit(NOT_AUTHORIZED)
    else:
        code = FirewallError.get_code(dbus_message)
        if code in [ ALREADY_ENABLED, NOT_ENABLED, ZONE_ALREADY_SET ]:
            print("Warning: %s" % dbus_message)
            sys.exit(0)
        else:
            print("Error: %s" % dbus_message)
        sys.exit(code)

sys.exit(0)
